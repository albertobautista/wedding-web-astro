---
export const EVENT_TIMESTAMP = 1740492000000 as const;
import Date from "./Date.astro";
import Icon from "./Icon.astro";
import Typography from "./Typography.astro";
import Leaf from "./icons/Leaf.astro";
---

<div
  class="flex flex-col items-center justify-center pb-20 pt-10 bg-primary place-items-center gap-y-2"
  aria-label="cuenta atrÃ¡s"
>
  <Typography
    as="h3"
    color="white"
    class:list={"text-balance text-center font-atomic text-[60px]"}
    >Save the date
  </Typography>
  <Icon isDark>
    <Leaf class="w-7 h-7 fill-secondary" />
  </Icon>
  <div
    class="grid grid-cols-2 md:grid-cols-4 place-items-center gap-14 mt-5 uppercase select-none text-secondary"
    data-date={EVENT_TIMESTAMP}
    role="timer"
  >
    <Date
      dateType="DÃ­as"
      attribute={{ "data-days": "" }}
      wrapperClassName="my-2"
      className="text-4xl text-accent"
      height={"h-[2.5rem]"}
      max={129}
    />
    <Date
      wrapperClassName="my-2"
      dateType="Horas"
      attribute={{ "data-hours": "" }}
      className="text-4xl text-accent"
      height={"h-[2.5rem]"}
      max={23}
    />

    <Date
      wrapperClassName="my-2"
      dateType="Minutos"
      attribute={{ "data-minutes": "" }}
      className="text-4xl text-accent"
      height={"h-[2.5rem]"}
      max={59}
    />

    <Date
      wrapperClassName="my-2"
      dateType="Segundos"
      attribute={{ "data-seconds": "" }}
      className="text-4xl text-accent"
      height={"h-[2.5rem]"}
      max={59}
    />
  </div>
</div>

<script>
  import createCountdown from "@/lib/countdown";
  import { $ } from "@/lib/dom-selector";

  function initCountdown() {
    const $countdown = $("[data-date]");
    if (!$countdown) return;

    const $days = {
      firstDigit: $("[data-days] [data-first-group]", $countdown),
      secondDigit: $("[data-days] [data-second-group]", $countdown),
      thirdDigit: $("[data-days] [data-third-group]", $countdown),
    };
    const $hours = {
      firstDigit: $("[data-hours] [data-first-group]", $countdown),
      secondDigit: $("[data-hours] [data-second-group]", $countdown),
    };
    const $minutes = {
      firstDigit: $("[data-minutes] [data-first-group]", $countdown),
      secondDigit: $("[data-minutes] [data-second-group]", $countdown),
    };
    const $seconds = {
      firstDigit: $("[data-seconds] [data-first-group]", $countdown),
      secondDigit: $("[data-seconds] [data-second-group]", $countdown),
    };
    const timestamp = Number($countdown?.getAttribute("data-date") ?? 0);
    const countdown = createCountdown(timestamp, {
      onTick({ days, hours, minutes, seconds }) {
        if (
          $days.firstDigit instanceof HTMLElement &&
          $days.secondDigit instanceof HTMLElement &&
          $days.thirdDigit instanceof HTMLElement
        ) {
          switch (days.length) {
            case 3:
              animateDigit($days.firstDigit, days[0], "day");
              animateDigit($days.secondDigit, days[1], "day");
              animateDigit($days.thirdDigit, days[2], "day");
              break;
            case 2:
              $days.firstDigit.parentNode?.removeChild($days.firstDigit);
              animateDigit($days.secondDigit, days[0], "day");
              animateDigit($days.thirdDigit, days[1], "day");
              break;
            default:
              $days.secondDigit.parentNode?.removeChild($days.secondDigit);
              animateDigit($days.thirdDigit, days[0], "day");
          }
        }

        if (
          $hours.firstDigit instanceof HTMLElement &&
          $hours.secondDigit instanceof HTMLElement
        ) {
          animateDigit($hours.firstDigit, hours[0], "hour");
          animateDigit($hours.secondDigit, hours[1], "hour");
        }

        if (
          $minutes.firstDigit instanceof HTMLElement &&
          $minutes.secondDigit instanceof HTMLElement
        ) {
          animateDigit($minutes.firstDigit, minutes[0], "minute");
          animateDigit($minutes.secondDigit, minutes[1], "minute");
        }

        if (
          $seconds.firstDigit instanceof HTMLElement &&
          $seconds.secondDigit instanceof HTMLElement
        ) {
          animateDigit($seconds.firstDigit, seconds[0], "second");
          animateDigit($seconds.secondDigit, seconds[1], "second");
        }
      },

      onComplete() {
        $(".countdown-text")?.remove();

        if (!$countdown) return;

        $countdown.innerHTML = "Â¡El evento de presentaciÃ³n ha empezado! ðŸŽ‰";
        $countdown.className =
          "text-primary uppercase font-semibold animate-fade-in text-3xl text-center";
      },
    });

    return countdown;
  }

  function animateDigit(group: HTMLElement, value: string, type: string) {
    const wrapper = $("[data-wrapper]", group);
    const num = $(`[data-num="${value}"]`, group);
    const xnum = $("[data-num-x0]", group); // 0 aÃ±adido para la animaciÃ³n

    if (
      wrapper instanceof HTMLElement &&
      num instanceof HTMLElement &&
      xnum instanceof HTMLElement
    ) {
      wrapper.style.transform = `translateY(-${num.offsetTop}px)`;

      // Cuando cambie, volver arriba
      if (value === "0") {
        setTimeout(() => {
          wrapper.classList.toggle("duration-[800ms]", false);
          wrapper.classList.toggle("transition-transform", false);
          wrapper.style.transform = `translateY(-${xnum.offsetTop}px)`;
        }, 800);
      } else {
        wrapper.classList.toggle("duration-[800ms]", true);
        wrapper.classList.toggle("transition-transform", true);
      }
    }
  }

  document.addEventListener("astro:page-load", () => {
    const countdown = initCountdown();
    countdown && countdown.start();
  });
</script>
